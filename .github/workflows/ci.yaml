name: Elixir CI

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]

env:
  MIX_ENV: test

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - uses: erlef/setup-beam@v1
      name: Install Erlang and Elixir
      id: setup-beam
      with:
        version-file: .tool-versions
        version-type: strict

    - name: Deps Cache
      uses: actions/cache@v4
      with:
        key: ${{ runner.os }}-deps-${{ hashFiles('./mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-deps
        path: ./deps

    # Cache key based on Erlang/Elixir version and the mix.lock hash
    - name: Restore PLT cache
      id: plt_cache
      uses: actions/cache/restore@v3
      with:
        key: |
          plt-${{ runner.os }}-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          plt-${{ runner.os }}-
        path: |
          priv/plts

    - name: Build Cache
      uses: actions/cache@v4
      with:
        key: ${{ runner.os }}-build-${{ hashFiles('./mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ hashFiles('./mix.lock') }}
        path: ./_build

    - name: Run docker compose
      uses: hoverkraft-tech/compose-action@v2.0.1
      with:
        up-flags: "--wait" 

    - name: Install dependencies
      run: mix deps.get

    - name: Compiles without warnings
      run: mix compile --warnings-as-errors

    - name: Check Formatting
      run: mix format --check-formatted

    # Create PLTs if no cache was found
    - name: Create PLTs
      if: steps.plt_cache.outputs.cache-hit != 'true'
      run: mix dialyzer --plt

    # By default, the GitHub Cache action will only save the cache if all steps in the job succeed,
    # so we separate the cache restore and save steps in case running dialyzer fails.
    - name: Save PLT cache
      id: plt_cache_save
      uses: actions/cache/save@v3
      if: steps.plt_cache.outputs.cache-hit != 'true'
      with:
        key: |
          plt-${{ runner.os }}-${{ hashFiles('**/mix.lock') }}
        path: |
          priv/plts

    - name: Run dialyzer
      # Two formats are included for ease of debugging and it is lightly recommended to use both, see https://github.com/jeremyjh/dialyxir/issues/530 for reasoning
      # --format github is helpful to print the warnings in a way that GitHub understands and can place on the /files page of a PR
      # --format dialyxir allows the raw GitHub actions logs to be useful because they have the full warning printed
      run: mix dialyzer --format github --format dialyxir

    - name: Run tests
      run: mix test
